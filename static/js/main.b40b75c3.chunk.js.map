{"version":3,"sources":["components/Loader/Loader.tsx","store/loading.ts","store/posts.ts","store/postId.ts","store/post.ts","store/users.ts","store/userId.ts","store/comments.ts","store/hideComments.ts","helpers/api.ts","helpers/posts.ts","helpers/comments.ts","store/index.ts","components/Start/Start.tsx","helpers/users.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["Loader","className","START_LOADING","FINISH_LOADING","startLoading","type","finishLoading","reducer","loading","action","SET_POSTS","setPosts","posts","SET_POST_ID","setPostId","postId","SET_POST","setPost","post","id","userId","title","body","SET_USERS","setUsers","users","SET_USER_ID","SET_COMMENTS","setComments","comments","HIDE_COMMENTS","hiding","request","url","method","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","getUserPosts","undefined","getPostDetails","result","deletePost","getPostComments","postNewComment","form","JSON","stringify","headers","deleteComment","commentId","rootReducer","combineReducers","loadingReducer","postsReducer","postIdReducer","postReducer","usersReducer","userIdReducer","commentsReducer","hidingReducer","isLoading","state","getPosts","getPostId","getPost","getUsers","getUserId","getComments","isHiding","loadPosts","dispatch","a","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","useDispatch","useSelector","onClick","PostsList","handleClick","loadComments","loadPost","handleDeleteClick","allPosts","removePost","length","map","classNames","NewCommentForm","useState","email","name","setForm","isValidForm","setIsValidForm","validator","changeInput","event","target","value","resetForm","validation","useMemo","test","useEffect","onSubmit","preventDefault","newComment","allComments","createComment","placeholder","onChange","PostDetails","hide","handleClickOnDeleteButton","removeComment","comment","App","setUserId","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b40b75c3.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = (posts: Posts[]) => ({ type: SET_POSTS, posts });\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POST_ID = 'SET_POST_ID';\n\nexport const setPostId = (postId: number) => ({ type: SET_POST_ID, postId });\n\nconst reducer = (postId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST_ID:\n      return action.postId;\n\n    default:\n      return postId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POST = 'SET_POST';\n\nexport const setPost = (post: Posts) => ({ type: SET_POST, post });\n\nconst reducer = (post = {\n  id: 0,\n  userId: 0,\n  title: '',\n  body: '',\n}, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POST:\n      return action.post;\n\n    default:\n      return post;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_USERS = 'SET_USERS';\n\nexport const setUsers = (users: Users[]) => ({ type: SET_USERS, users });\n\nconst reducer = (users = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERS:\n      return action.users;\n\n    default:\n      return users;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_USER_ID = 'SET_USER_ID';\n\nexport const setUserId = (userId: number) => ({ type: SET_USER_ID, userId });\n\nconst reducer = (userId = 0, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER_ID:\n      return action.userId;\n\n    default:\n      return userId;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_COMMENTS = 'SET_COMMENTS';\n\nexport const setComments = (comments: Comments[]) => ({\n  type: SET_COMMENTS,\n  comments,\n});\n\nconst reducer = (comments = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return action.comments;\n\n    default:\n      return comments;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst HIDE_COMMENTS = 'HIDE_COMMENTS';\n\nexport const hideComments = () => ({ type: HIDE_COMMENTS });\n\nconst reducer = (hiding = false, action: AnyAction) => {\n  switch (action.type) {\n    case HIDE_COMMENTS:\n      return !hiding;\n\n    default:\n      return hiding;\n  }\n};\n\nexport default reducer;\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, method?: RequestInit | undefined) => {\n  return fetch(`${BASE_URL}${url}`, method)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId?: number) => {\n  if (userId === undefined || userId === 0) {\n    return request('/posts');\n  }\n\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  const result = request(`/posts/${postId}/`);\n\n  if (!result) {\n    return {\n      id: 0,\n      userId: 0,\n      title: '',\n      body: '',\n    };\n  }\n\n  return result;\n};\n\nexport const deletePost = (postId: number) => {\n  return request(`/posts/${postId}`, {\n    method: 'DELETE',\n  });\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const postNewComment = (form: NewComment) => {\n  return request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(form),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport postsReducer, { setPosts } from './posts';\nimport postIdReducer, { setPostId } from './postId';\nimport postReducer, { setPost } from './post';\nimport usersReducer, { setUsers } from './users';\nimport userIdReducer from './userId';\nimport commentsReducer, { setComments } from './comments';\nimport hidingReducer from './hideComments';\nimport { getUserPosts, deletePost, getPostDetails } from '../helpers/posts';\nimport { getAllUsers } from '../helpers/users';\nimport {\n  deleteComment,\n  getPostComments,\n  postNewComment,\n} from '../helpers/comments';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postsReducer,\n  postId: postIdReducer,\n  post: postReducer,\n  users: usersReducer,\n  userId: userIdReducer,\n  comments: commentsReducer,\n  hiding: hidingReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getPostId = (state: RootState) => state.postId;\nexport const getPost = (state: RootState) => state.post;\nexport const getUsers = (state: RootState) => state.users;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getComments = (state: RootState) => state.comments;\nexport const isHiding = (state: RootState) => state.hiding;\n\nexport const loadPosts = (userId?: number) => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(startLoading());\n\n    try {\n      const posts = await getUserPosts(userId);\n\n      dispatch(setPosts(posts));\n    } catch (error) {\n      dispatch(setPosts([]));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nexport const loadPost = (postId: number) => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(startLoading());\n\n    try {\n      const post = await getPostDetails(postId);\n\n      dispatch(setPost(post));\n    } catch (error) {\n      dispatch(setPost({\n        id: 0,\n        userId: 0,\n        title: '',\n        body: '',\n      }));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nexport const loadUsers = () => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(startLoading());\n\n    try {\n      const users = await getAllUsers();\n\n      dispatch(setUsers(users));\n    } catch (error) {\n      dispatch(setUsers([]));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nexport const loadComments = (postId: number) => {\n  return async (dispatch: Dispatch<unknown>) => {\n    dispatch(startLoading());\n\n    try {\n      const comments = await getPostComments(postId);\n\n      dispatch(setComments(comments));\n    } catch (error) {\n      dispatch(setComments([]));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nexport const removePost = (postId: number) => {\n  return async (dispatch: Dispatch<unknown>) => {\n    try {\n      await deletePost(postId);\n\n      const allPosts = await getUserPosts();\n\n      dispatch(setPosts(allPosts));\n    } catch {\n      dispatch(setPosts([]));\n    }\n  };\n};\n\nexport const removeComment = (commentId: number, postId: number) => {\n  return async (dispatch: Dispatch<unknown>) => {\n    try {\n      await deleteComment(commentId);\n\n      const allComments = await getPostComments(postId);\n\n      dispatch(setComments(allComments));\n    } catch {\n      dispatch(setComments([]));\n    }\n  };\n};\n\nexport const createComment = (form: NewComment) => {\n  return async (dispatch: Dispatch<unknown>) => {\n    try {\n      await postNewComment(form);\n\n      const allComments = await getPostComments(form.postId);\n\n      dispatch(setComments(allComments));\n    } catch {\n      dispatch(setComments([]));\n    }\n  };\n};\n\nexport const resetPostDetail = () => {\n  return (dispatch: Dispatch<unknown>) => {\n    dispatch(setPost({\n      id: 0,\n      userId: 0,\n      title: '',\n      body: '',\n    }));\n    dispatch(setPostId(0));\n    dispatch(setComments([]));\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  isLoading,\n  loadPosts,\n  loadUsers,\n} from '../../store';\nimport { Loader } from '../Loader';\nimport './Start.scss';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  const handleClick = () => {\n    dispatch(loadUsers());\n    dispatch(loadPosts());\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"Start__button\"\n        onClick={handleClick}\n      >\n        Start\n      </button>\n\n      {loading && <Loader />}\n    </>\n  );\n};\n","import { request } from './api';\n\nexport const getAllUsers = () => {\n  return request('/users');\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport {\n  getPosts,\n  getPostId,\n  removePost,\n  loadComments,\n  loadPost,\n} from '../../store';\nimport { setPostId } from '../../store/postId';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts: Posts[] = useSelector(getPosts);\n  const postId = useSelector(getPostId);\n\n  const handleClick = (id: number) => {\n    dispatch(setPostId(postId === id ? 0 : id));\n\n    if (postId !== id) {\n      dispatch(loadComments(id));\n      dispatch(loadPost(id));\n    }\n  };\n\n  const handleDeleteClick = (id: number) => {\n    dispatch(removePost(id));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts.length === 0\n        ? (\n          <div className=\"App__sidebar--message\">\n            <p>\n              {'This user don\\'t have posts yet'}\n            </p>\n          </div>\n        )\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div className=\"PostsList__post\">\n                  <b>\n                    {`[User #${post.userId}]: `}\n                  </b>\n                  <b>{post.title}</b>\n                  <p>{post.body}</p>\n                </div>\n\n                <div className=\"PostsList__buttons\">\n                  <button\n                    type=\"button\"\n                    className={classNames(\n                      'PostsList__user-button button',\n                      {\n                        'PostsList__user-button--selected':\n                          postId === post.id,\n                      },\n                    )}\n                    onClick={() => handleClick(post.id)}\n                  >\n                    {postId === post.id ? 'Close' : 'Open'}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    className={classNames(\n                      'PostsList__user-button button',\n                      'PostsList__user-button--delete',\n                    )}\n                    onClick={() => handleDeleteClick(post.id)}\n                  >\n                    X\n                  </button>\n                </div>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { getPostId, createComment } from '../../store';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const postId = useSelector(getPostId);\n  const [form, setForm] = useState({\n    body: '',\n    email: '',\n    name: '',\n  });\n  const [isValidForm, setIsValidForm] = useState(true);\n\n  // eslint-disable-next-line no-useless-escape\n  const validator = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  const changeInput = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    setIsValidForm(true);\n\n    switch (name) {\n      case 'body':\n        setForm({\n          ...form,\n          body: value,\n        });\n        break;\n\n      case 'email':\n        setForm({\n          ...form,\n          email: value,\n        });\n        break;\n\n      case 'name':\n        setForm({\n          ...form,\n          name: value,\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const resetForm = () => {\n    setForm({\n      body: '',\n      email: '',\n      name: '',\n    });\n    setIsValidForm(true);\n  };\n\n  const validation = useMemo(() => {\n    return (form.name.length > 0\n      && form.body.length > 0\n      && validator.test(form.email)\n    );\n  }, [form]);\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (validation) {\n      const newComment = {\n        postId,\n        body: form.body,\n        email: form.email,\n        name: form.name,\n      };\n\n      dispatch(createComment(newComment));\n      resetForm();\n    } else {\n      setIsValidForm(false);\n    }\n  };\n\n  useEffect(() => {\n    resetForm();\n  }, [postId]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      {!isValidForm && (\n        <p className=\"NewCommentForm__error\">Enter correct information</p>\n      )}\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={form.name}\n          className={classNames(\n            'NewCommentForm__input',\n            {\n              'NewCommentForm__input--error':\n                (!isValidForm && form.name.length === 0),\n            },\n          )}\n          onChange={changeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          value={form.email}\n          className={classNames(\n            'NewCommentForm__input',\n            {\n              'NewCommentForm__input--error':\n                (!isValidForm && !validator.test(form.email)),\n            },\n          )}\n          onChange={changeInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={form.body}\n          className={classNames(\n            'NewCommentForm__input',\n            {\n              'NewCommentForm__input--error':\n                (!isValidForm && form.body.length === 0),\n            },\n          )}\n          onChange={changeInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NewCommentForm } from '../NewCommentForm';\nimport {\n  getPost,\n  getPostId,\n  getComments,\n  isHiding,\n  removeComment,\n} from '../../store';\nimport { hideComments } from '../../store/hideComments';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const dispatch = useDispatch();\n  const post = useSelector(getPost);\n  const postId = useSelector(getPostId);\n  const comments: Comments[] = useSelector(getComments);\n  const hide = useSelector(isHiding);\n\n  const handleClickOnHideButton = () => {\n    dispatch(hideComments());\n  };\n\n  const handleClickOnDeleteButton = (id: number) => {\n    dispatch(removeComment(id, postId));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {post && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {post.body}\n            </p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {comments.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handleClickOnHideButton}\n              >\n                {hide ? 'Show ' : 'Hide '}\n                {comments.length}\n                {comments.length > 1 ? ' comments' : ' comment'}\n              </button>\n            )}\n\n            {!hide && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => handleClickOnDeleteButton(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from './components/Loader';\nimport './styles/general.scss';\nimport './App.scss';\nimport { Start } from './components/Start/Start';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  isLoading,\n  getPosts,\n  getUsers,\n  loadPosts,\n  getPostId,\n  getUserId,\n  resetPostDetail,\n} from './store';\nimport { setUserId } from './store/userId';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const posts = useSelector(getPosts);\n  const users: Users[] = useSelector(getUsers);\n  const postId = useSelector(getPostId);\n  const userId = useSelector(getUserId);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(setUserId(+event.target.value));\n    dispatch(loadPosts(+event.target.value));\n    dispatch(resetPostDetail());\n  };\n\n  return (\n    <div className=\"App\">\n      {(posts.length === 0 && userId === 0)\n        ? (\n          <Start />\n        )\n        : (\n          <>\n            <header className=\"App__header\">\n              <label>\n                Select a user: &nbsp;\n\n                <select\n                  className=\"App__user-selector\"\n                  onChange={handleSelectChange}\n                >\n                  <option value=\"0\">All users</option>\n                  {users.map(user => (\n                    <option\n                      key={user.id}\n                      value={user.id}\n                    >\n                      {user.name}\n                    </option>\n                  ))}\n                </select>\n              </label>\n            </header>\n\n            <main className=\"App__main\">\n              <div className=\"App__sidebar\">\n                {((loading && userId !== 0)\n                  || (loading && postId === 0 && userId === 0)) && <Loader />}\n                <PostsList />\n              </div>\n\n              <div className=\"App__content\">\n                <h2>Post details:</h2>\n\n                {(loading && postId !== 0) && <Loader />}\n\n                {postId !== 0\n                  ? (\n                    <PostDetails />\n                  )\n                  : (\n                    <div className=\"App__sidebar--message\">\n                      <p>Choose a post to see a detail</p>\n                    </div>\n                  )}\n              </div>\n            </main>\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}